rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {
    function prefix() {
  		return /databases/$(db)/documents;
    }

    match /{document=**} { // Access to all resources are blocked by default
      allow read, write: if false;
    }

    function numbFacultiesIsLessThan20() {
    	let snapshot = get(/$(prefix())/aggregate/numbFaculties);
    	return request.method == 'update' || snapshot == null || snapshot.data.value < 20;
    }
    function resourceIsValidFaculty() { // check faculty payload on create and update
      let facultyName = request.resource.data.name;
      return facultyName is string &&
      facultyName.matches('^([a-z]+\\s)*[a-z]+$') &&
      facultyName.size() >= 3 &&
      facultyName.size() <= 50 &&
      !exists(/$(prefix())/uniqueFacNames/$(facultyName))
    }
    function isAdmin() {
      return isLoggedIn() && debug(request.auth.token.isAdmin);
    }
    match /faculties/{facultyId} {
      allow read: if isLoggedIn(); // any authenticated user can view a list of faculties
      allow create, update: if isAdmin() && fieldsExist(['name'], []) && resourceIsValidFaculty()
      && numbFacultiesIsLessThan20();
      allow delete: if isAdmin();

      match /sysusers/{userId} {
      	allow read: if isAdmin();
      }

      match /members/{userId} {
      	allow read, create, delete: if isAdmin();
      }
    }

    match /repos/{repoId} {
    	allow read: if isLoggedIn();
    	allow write: if isAdmin();

      match /dropboxes/{dropboxId} {
      	allow read, write: if isLoggedIn();
      }
    }

    match /user_faculties/{docId} {
    	allow read: if isLoggedIn();
    }
  }
}

// @required: an array of fields that must be included in the incoming doc
// @optional: an array of fields that are optional in the incoming doc
function fieldsExist(required, optional) {
  let allAllowedFields = required.concat(optional);
  return request.resource.data.keys().hasOnly(allAllowedFields) &&
  request.resource.data.keys().hasAll(required);
}

function isLoggedIn() {
  return request.auth != null;
}
